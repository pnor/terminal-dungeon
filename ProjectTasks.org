* TODOs og the game
** [0%] First Steps
*** [50%] Single Room
**** The how to
How to represent the world?
*Camera* should take in/own
- world/map
- entities
- top layer info (darkness)
and it handles the sorting to draw stuff

*World/map handles*
- big matrix of wall vs floor vs effect tiles vs etc.
(can make it from tilemap)

*Entities*
- vector of entity structs

*Particles*
- ? todo

*How to draw*
Ideally its nice and abstract; terminal does one way, GUIs do another
Encode "way" as what *final rendering system* we deploy as a Thread local system
The rendering process is a "unit"

**** [X] Beginning of Game Map (to have a room)
**** [X] Beginning of World (to draw)
**** [ ] Beginning of Camera to render
How to render?

 👁 \rightarrow top layers \rightarrow entities \rightarrow world

For each entitiy, check if its in range

if it is, shoot a ray through , and color the canvas


**** [ ] Cursive View to render camera's image
*** [ ] Player in room
*** [ ] Player can move
** TODO Basic movement
** TODO Enemy
** TODO Spells
** TODO Map Generation
** TODO Main UI
** TODO menus and related

* Details
  :PROPERTIES:
  :CUSTOM_ID: todos
  :END:

** Map
   :PROPERTIES:
   :CUSTOM_ID: map
   :END:

Tilemap file -> Game Map

** World
   :PROPERTIES:
   :CUSTOM_ID: world
   :END:

The parts of the world, which is used to draw
Ordered from "lowest" to "highest": (map is at bottom of stack)

- Map 🌎 - from the tilemap

- Entities (player, enemies, items) - hashmapped

- Top Layer (darkness shroud, transparent clouds) - darkness is opaque,
and stops ray - transparent effects would be for style, and should be
disabled on non true color terminals

- Particle effects - nother layer

- Camera 👁

** Camera
   :PROPERTIES:
   :CUSTOM_ID: camera
   :END:

World * Position -> String of what to show

Use ray tracing strategy: for each pixel in view, shoot a "ray" and draw
the character it first hits

See [[file:~/Documents/Classes Related/CS 4620/assignment/assignment5/ray.py::def render_image(camera, scene, lights, nx, ny):][the ray tracer]] for an example of params of a camera

** Entities
   :PROPERTIES:
   :CUSTOM_ID: entities
   :END:

Main ones include:
- Player
- Enemy
- Spawn
- point
- Wall
- Locked
- Doors
- Keys
- Items


Use an ECS lib? (yes!)
https://github.com/amethyst/specs
https://specs.amethyst.rs/docs/tutorials/01_intro.html <- great docs

** Abstracting
In order to really abstract out the logic from the how it looks, we need
- backend (the game and ECS)
- frontend (UI + input + rendering)
  ... may be difficult to do it like that as animations and the like would have to be defined in 3D in order to specify a transformation down to 2D (lossy conversion better than trying to make 2D \rightarrow 3D)
